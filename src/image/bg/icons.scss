// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$-instagram-name: 'Instagram';
$-instagram-x: 143px;
$-instagram-y: 0px;
$-instagram-offset-x: -143px;
$-instagram-offset-y: 0px;
$-instagram-width: 17px;
$-instagram-height: 18px;
$-instagram-total-width: 160px;
$-instagram-total-height: 143px;
$-instagram-image: 'icons.png';
$-instagram: (143px, 0px, -143px, 0px, 17px, 18px, 160px, 143px, 'icons.png', 'Instagram', );
$-shape-name: 'Shape';
$-shape-x: 143px;
$-shape-y: 66px;
$-shape-offset-x: -143px;
$-shape-offset-y: -66px;
$-shape-width: 16px;
$-shape-height: 16px;
$-shape-total-width: 160px;
$-shape-total-height: 143px;
$-shape-image: 'icons.png';
$-shape: (143px, 66px, -143px, -66px, 16px, 16px, 160px, 143px, 'icons.png', 'Shape', );
$checkmark-glyph-name: 'checkmark--glyph';
$checkmark-glyph-x: 0px;
$checkmark-glyph-y: 127px;
$checkmark-glyph-offset-x: 0px;
$checkmark-glyph-offset-y: -127px;
$checkmark-glyph-width: 16px;
$checkmark-glyph-height: 16px;
$checkmark-glyph-total-width: 160px;
$checkmark-glyph-total-height: 143px;
$checkmark-glyph-image: 'icons.png';
$checkmark-glyph: (0px, 127px, 0px, -127px, 16px, 16px, 160px, 143px, 'icons.png', 'checkmark--glyph', );
$facebook-name: 'facebook';
$facebook-x: 143px;
$facebook-y: 33px;
$facebook-offset-x: -143px;
$facebook-offset-y: -33px;
$facebook-width: 17px;
$facebook-height: 18px;
$facebook-total-width: 160px;
$facebook-total-height: 143px;
$facebook-image: 'icons.png';
$facebook: (143px, 33px, -143px, -33px, 17px, 18px, 160px, 143px, 'icons.png', 'facebook', );
$logo-footer-name: 'logo_footer';
$logo-footer-x: 77px;
$logo-footer-y: 0px;
$logo-footer-offset-x: -77px;
$logo-footer-offset-y: 0px;
$logo-footer-width: 51px;
$logo-footer-height: 47px;
$logo-footer-total-width: 160px;
$logo-footer-total-height: 143px;
$logo-footer-image: 'icons.png';
$logo-footer: (77px, 0px, -77px, 0px, 51px, 47px, 160px, 143px, 'icons.png', 'logo_footer', );
$logo-header-name: 'logo_header';
$logo-header-x: 0px;
$logo-header-y: 77px;
$logo-header-offset-x: 0px;
$logo-header-offset-y: -77px;
$logo-header-width: 36px;
$logo-header-height: 35px;
$logo-header-total-width: 160px;
$logo-header-total-height: 143px;
$logo-header-image: 'icons.png';
$logo-header: (0px, 77px, 0px, -77px, 36px, 35px, 160px, 143px, 'icons.png', 'logo_header', );
$menu-name: 'menu';
$menu-x: 96px;
$menu-y: 77px;
$menu-offset-x: -96px;
$menu-offset-y: -77px;
$menu-width: 27px;
$menu-height: 17px;
$menu-total-width: 160px;
$menu-total-height: 143px;
$menu-image: 'icons.png';
$menu: (96px, 77px, -96px, -77px, 27px, 17px, 160px, 143px, 'icons.png', 'menu', );
$telegram-name: 'telegram';
$telegram-x: 0px;
$telegram-y: 0px;
$telegram-offset-x: 0px;
$telegram-offset-y: 0px;
$telegram-width: 62px;
$telegram-height: 62px;
$telegram-total-width: 160px;
$telegram-total-height: 143px;
$telegram-image: 'icons.png';
$telegram: (0px, 0px, 0px, 0px, 62px, 62px, 160px, 143px, 'icons.png', 'telegram', );
$vk-name: 'vk';
$vk-x: 51px;
$vk-y: 77px;
$vk-offset-x: -51px;
$vk-offset-y: -77px;
$vk-width: 30px;
$vk-height: 20px;
$vk-total-width: 160px;
$vk-total-height: 143px;
$vk-image: 'icons.png';
$vk: (51px, 77px, -51px, -77px, 30px, 20px, 160px, 143px, 'icons.png', 'vk', );
$spritesheet-width: 160px;
$spritesheet-height: 143px;
$spritesheet-image: 'icons.png';
$spritesheet-sprites: ($-instagram, $-shape, $checkmark-glyph, $facebook, $logo-footer, $logo-header, $menu, $telegram, $vk, );
$spritesheet: (160px, 143px, 'icons.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
